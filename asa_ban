#!/usr/bin/python3

import os, sys
# module for reading password in safely
from getpass import getpass
# modules for SSH interaction
import paramiko
#from paramikoe import SSHClientInteraction
from paramiko_expect import SSHClientInteraction
# command line argument parsing
import argparse
# configuration file parser
from configparser import ConfigParser



# get arguments
parser = argparse.ArgumentParser(
	description="ban script")
parser.add_argument("ip_address", help="IP address to ban. If none is specified, will collect an address from stdin.", nargs="?", default=None)
parser.add_argument("-u", help="Unban an ip address instead of banning one", dest="unban", action="store_true")
parser.add_argument("-s", "--", help="stanza to use from the config file", dest="stanza")
parser.add_argument('-c', help="config file", dest="config_file")
parser.add_argument('-v', help="verbose", dest="verbose", action="store_true")
parser.add_argument("-d", help="Drop the object drop - Remove everything", dest="drop", action="store_true")
#parser.add_argument('-f', help="file for list of ip addresses", dest="listofip", action="store_true")
parser.add_argument('-f', help="file for list of ip addresses", dest="listofip")
parser.add_argument('-o', help="Network Object for ip addresses", dest="netobject")
parser.add_argument('--debug', help="debug", dest="debug", action="store_true")
args = parser.parse_args()


# evaluate verbosity levels
verbose = False
debug = False

if args.verbose:
	verbose = True
if args.debug:
	debug = True
	verbose = True


# custom network object?	
netobject = args.netobject

# unban?
unban = args.unban

#drop
drop = args.drop

# read in from a config if available
config = ConfigParser()
if args.config_file:
	try:
		config.read(args.config_file)
		if debug: print("using config file from command line")
	except:
		parser.error("invalid config file %s" %(args.config_file))
		sys.exit()
else: # no file given to us, try to read from a default file
	try:
		config.read('autoban.conf')
		if debug: print("falling back to 'autoban.conf'")
	except:
		parser.error("could not read autoban.conf")
		sys.exit()


listofip = args.listofip
list_of_ipaddresses = []

if listofip:
	with open(args.listofip, 'r') as f:
		list_of_ipaddresses = [line.strip() for line in f]


# determine which stanza we're going to use from the config file
if args.stanza:
	if not args.stanza in config:
		parser.error("specified stanza \"%s\" was not found in config file" %(args.stanza))
		sys.exit()
	else:
		stanza = args.stanza
else: # if none was given to us, fall back to a default
	if not 'default' in config['DEFAULT']:
		parser.error("no default stanza specified in DEFAULT section of config file")
		sys.exit()
	else:
		stanza = config['DEFAULT']['default']

	if not stanza in config:
		parser.error("invalid configuration section %s" %(stanza))
		sys.exit()


# extract required values from config file
asa_address = config[stanza]['address']
asa_port = int(config[stanza]['port'])
asa_timeout = int(config[stanza]['timeout'])


# extract optional values from config file
if "username" in config[stanza]:
	asa_username = config[stanza]["username"]
else:
	asa_username = input("username (enter for REDACTED): ")

if "use_ssh_key" in config[stanza]:
	use_ssh_key = config[stanza].getboolean("use_ssh_key")
else:
	use_ssh_key = False

# special handling for when we're using an SSH key for authentication
if use_ssh_key:
	if "password" in config[stanza]:
		asa_password = config[stanza]["password"]
	else:
		asa_password = getpass("Password: ")

if "enable_password" in config[stanza]:
	enable_password = config[stanza]["enable_password"]
else:
	enable_password = getpass("Enable Password: ")


if "ssh_known_hosts" in config[stanza]:
	ssh_known_hosts = config[stanza]["ssh_known_hosts"]
	ssh_known_hosts = os.path.expanduser(ssh_known_hosts)
else:
	ssh_known_hosts = os.path.expanduser("~/.ssh/known_hosts")

# get verbosity levels from config file
debug = config[stanza].getboolean("debug")
verbose = config[stanza].getboolean("verbose")

if debug:
	print("asa_address %s" %(asa_address))
	print("asa_username %s" %(asa_username))
	print("asa_port %s" %(asa_port))
	print("asa_timeout %s" %(asa_timeout))


# Check if command line argument used otherwise get group object from config file
if netobject:
	blacklist = args.netobject
else:
	if not "blacklist" in config[stanza]:
		parser.error("no blacklist variable specified in config stanza %s" %(stanza))
	else:
		blacklist = config[stanza]["blacklist"]

	if debug:
		paramiko.common.logging.basicConfig(level=paramiko.common.DEBUG)

# figure out what we're banning
if listofip:
	#print(list_of_ipaddresses)
	if drop:
		print ("Dropping network-object %s" %(blacklist))
	else:
		print ("Processing the ip address list")
elif drop:
		print ("Dropping network-object %s" %(blacklist))
elif args.ip_address:
	ip = args.ip_address
else:
	if unban:
	    ip = input("What IP would you like to unban? ")
	else:
	    ip = input("What IP would you like to ban? ")


# create child process
client=paramiko.SSHClient()
# load ssh known hosts
client.load_host_keys(ssh_known_hosts)
# connect
client.connect(asa_address, port=asa_port, username=asa_username, password=asa_password, timeout=asa_timeout, look_for_keys=use_ssh_key)
# set up the paramiko_expect interaction object
interact=SSHClientInteraction(client, timeout=asa_timeout, display=verbose)

# prompt that we should expect upon successful completion of a command
asaprompt = ".*# "

#log in and set some environment stuff
interact.expect(".*>.*")
interact.send("en")
interact.expect(".*Password:.*")
interact.send(enable_password)
interact.expect(asaprompt)
interact.send("configure terminal")
interact.expect(asaprompt)
interact.send("terminal pager 0")
interact.expect(asaprompt)
interact.send("terminal width 300")
interact.expect(asaprompt)

# ban or unban accordingly
if drop:
	interact.send("no object-group network %s" %(blacklist))
	interact.send("object-group network %s" %(blacklist))
	interact.send("network-object object placeholder")
	interact.send("object-group network DynamicBLockList")
	interact.send("group-object %s" %(blacklist))
else:
	interact.send("object-group network %s" %(blacklist))
	if listofip:
		for i, val in enumerate(list_of_ipaddresses):
			if unban:
				interact.send("no network-object host " + val)
				interact.expect(asaprompt)
			else:
				interact.send("network-object host " + val)
				interact.expect(asaprompt)
		interact.send("object-group network DynamicBLockList")
		interact.send("group-object %s" %(blacklist))
	elif unban:
		interact.send("no network-object host " + ip)
	else:
		interact.send("network-object host " + ip)

interact.expect(asaprompt)
# close connection
client.close()
